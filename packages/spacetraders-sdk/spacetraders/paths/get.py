# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from spacetraders import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders import schemas  # noqa: F401

from . import path



class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "serverResets",
            "resetDate",
            "stats",
            "description",
            "links",
            "leaderboards",
            "announcements",
            "version",
            "status",
        }
        
        class properties:
            status = schemas.StrSchema
            version = schemas.StrSchema
            resetDate = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class stats(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "ships",
                        "systems",
                        "waypoints",
                        "agents",
                    }
                    
                    class properties:
                        agents = schemas.IntSchema
                        ships = schemas.IntSchema
                        systems = schemas.IntSchema
                        waypoints = schemas.IntSchema
                        __annotations__ = {
                            "agents": agents,
                            "ships": ships,
                            "systems": systems,
                            "waypoints": waypoints,
                        }
                
                ships: MetaOapg.properties.ships
                systems: MetaOapg.properties.systems
                waypoints: MetaOapg.properties.waypoints
                agents: MetaOapg.properties.agents
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["agents"]) -> MetaOapg.properties.agents: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ships"]) -> MetaOapg.properties.ships: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["systems"]) -> MetaOapg.properties.systems: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["waypoints"]) -> MetaOapg.properties.waypoints: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["agents", "ships", "systems", "waypoints", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["agents"]) -> MetaOapg.properties.agents: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ships"]) -> MetaOapg.properties.ships: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["systems"]) -> MetaOapg.properties.systems: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["waypoints"]) -> MetaOapg.properties.waypoints: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["agents", "ships", "systems", "waypoints", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    ships: typing.Union[MetaOapg.properties.ships, decimal.Decimal, int, ],
                    systems: typing.Union[MetaOapg.properties.systems, decimal.Decimal, int, ],
                    waypoints: typing.Union[MetaOapg.properties.waypoints, decimal.Decimal, int, ],
                    agents: typing.Union[MetaOapg.properties.agents, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'stats':
                    return super().__new__(
                        cls,
                        *_args,
                        ships=ships,
                        systems=systems,
                        waypoints=waypoints,
                        agents=agents,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class leaderboards(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "mostCredits",
                        "mostSubmittedCharts",
                    }
                    
                    class properties:
                        
                        
                        class mostCredits(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "credits",
                                            "agentSymbol",
                                        }
                                        
                                        class properties:
                                            agentSymbol = schemas.StrSchema
                                            credits = schemas.IntSchema
                                            __annotations__ = {
                                                "agentSymbol": agentSymbol,
                                                "credits": credits,
                                            }
                                    
                                    credits: MetaOapg.properties.credits
                                    agentSymbol: MetaOapg.properties.agentSymbol
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["agentSymbol"]) -> MetaOapg.properties.agentSymbol: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["credits"]) -> MetaOapg.properties.credits: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["agentSymbol", "credits", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["agentSymbol"]) -> MetaOapg.properties.agentSymbol: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["credits"]) -> MetaOapg.properties.credits: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["agentSymbol", "credits", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        credits: typing.Union[MetaOapg.properties.credits, decimal.Decimal, int, ],
                                        agentSymbol: typing.Union[MetaOapg.properties.agentSymbol, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            credits=credits,
                                            agentSymbol=agentSymbol,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mostCredits':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class mostSubmittedCharts(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "chartCount",
                                            "agentSymbol",
                                        }
                                        
                                        class properties:
                                            agentSymbol = schemas.StrSchema
                                            chartCount = schemas.IntSchema
                                            __annotations__ = {
                                                "agentSymbol": agentSymbol,
                                                "chartCount": chartCount,
                                            }
                                    
                                    chartCount: MetaOapg.properties.chartCount
                                    agentSymbol: MetaOapg.properties.agentSymbol
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["agentSymbol"]) -> MetaOapg.properties.agentSymbol: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["chartCount"]) -> MetaOapg.properties.chartCount: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["agentSymbol", "chartCount", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["agentSymbol"]) -> MetaOapg.properties.agentSymbol: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["chartCount"]) -> MetaOapg.properties.chartCount: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["agentSymbol", "chartCount", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        chartCount: typing.Union[MetaOapg.properties.chartCount, decimal.Decimal, int, ],
                                        agentSymbol: typing.Union[MetaOapg.properties.agentSymbol, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            chartCount=chartCount,
                                            agentSymbol=agentSymbol,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mostSubmittedCharts':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "mostCredits": mostCredits,
                            "mostSubmittedCharts": mostSubmittedCharts,
                        }
                
                mostCredits: MetaOapg.properties.mostCredits
                mostSubmittedCharts: MetaOapg.properties.mostSubmittedCharts
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mostCredits"]) -> MetaOapg.properties.mostCredits: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mostSubmittedCharts"]) -> MetaOapg.properties.mostSubmittedCharts: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["mostCredits", "mostSubmittedCharts", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mostCredits"]) -> MetaOapg.properties.mostCredits: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mostSubmittedCharts"]) -> MetaOapg.properties.mostSubmittedCharts: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mostCredits", "mostSubmittedCharts", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mostCredits: typing.Union[MetaOapg.properties.mostCredits, list, tuple, ],
                    mostSubmittedCharts: typing.Union[MetaOapg.properties.mostSubmittedCharts, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'leaderboards':
                    return super().__new__(
                        cls,
                        *_args,
                        mostCredits=mostCredits,
                        mostSubmittedCharts=mostSubmittedCharts,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class serverResets(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "next",
                        "frequency",
                    }
                    
                    class properties:
                        next = schemas.StrSchema
                        frequency = schemas.StrSchema
                        __annotations__ = {
                            "next": next,
                            "frequency": frequency,
                        }
                
                next: MetaOapg.properties.next
                frequency: MetaOapg.properties.frequency
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["next"]) -> MetaOapg.properties.next: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["next", "frequency", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["next"]) -> MetaOapg.properties.next: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["next", "frequency", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    next: typing.Union[MetaOapg.properties.next, str, ],
                    frequency: typing.Union[MetaOapg.properties.frequency, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'serverResets':
                    return super().__new__(
                        cls,
                        *_args,
                        next=next,
                        frequency=frequency,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class announcements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "body",
                                "title",
                            }
                            
                            class properties:
                                title = schemas.StrSchema
                                body = schemas.StrSchema
                                __annotations__ = {
                                    "title": title,
                                    "body": body,
                                }
                        
                        body: MetaOapg.properties.body
                        title: MetaOapg.properties.title
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "body", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "body", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            body: typing.Union[MetaOapg.properties.body, str, ],
                            title: typing.Union[MetaOapg.properties.title, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                body=body,
                                title=title,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'announcements':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "url",
                            }
                            
                            class properties:
                                name = schemas.StrSchema
                                url = schemas.StrSchema
                                __annotations__ = {
                                    "name": name,
                                    "url": url,
                                }
                        
                        name: MetaOapg.properties.name
                        url: MetaOapg.properties.url
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "url", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "url", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            url: typing.Union[MetaOapg.properties.url, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                name=name,
                                url=url,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "status": status,
                "version": version,
                "resetDate": resetDate,
                "description": description,
                "stats": stats,
                "leaderboards": leaderboards,
                "serverResets": serverResets,
                "announcements": announcements,
                "links": links,
            }
    
    serverResets: MetaOapg.properties.serverResets
    resetDate: MetaOapg.properties.resetDate
    stats: MetaOapg.properties.stats
    description: MetaOapg.properties.description
    links: MetaOapg.properties.links
    leaderboards: MetaOapg.properties.leaderboards
    announcements: MetaOapg.properties.announcements
    version: MetaOapg.properties.version
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resetDate"]) -> MetaOapg.properties.resetDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaderboards"]) -> MetaOapg.properties.leaderboards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverResets"]) -> MetaOapg.properties.serverResets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announcements"]) -> MetaOapg.properties.announcements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "version", "resetDate", "description", "stats", "leaderboards", "serverResets", "announcements", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resetDate"]) -> MetaOapg.properties.resetDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaderboards"]) -> MetaOapg.properties.leaderboards: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverResets"]) -> MetaOapg.properties.serverResets: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announcements"]) -> MetaOapg.properties.announcements: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "version", "resetDate", "description", "stats", "leaderboards", "serverResets", "announcements", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        serverResets: typing.Union[MetaOapg.properties.serverResets, dict, frozendict.frozendict, ],
        resetDate: typing.Union[MetaOapg.properties.resetDate, str, ],
        stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        links: typing.Union[MetaOapg.properties.links, list, tuple, ],
        leaderboards: typing.Union[MetaOapg.properties.leaderboards, dict, frozendict.frozendict, ],
        announcements: typing.Union[MetaOapg.properties.announcements, list, tuple, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            serverResets=serverResets,
            resetDate=resetDate,
            stats=stats,
            description=description,
            links=links,
            leaderboards=leaderboards,
            announcements=announcements,
            version=version,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_status_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_status_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_status_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_status_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetStatus(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_status(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_status(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_status(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_status(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_status_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_status_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


