# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders import schemas  # noqa: F401


class Survey(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
    """


    class MetaOapg:
        required = {
            "symbol",
            "size",
            "signature",
            "expiration",
            "deposits",
        }
        
        class properties:
            
            
            class signature(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class symbol(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class deposits(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SurveyDeposit']:
                        return SurveyDeposit
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SurveyDeposit'], typing.List['SurveyDeposit']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deposits':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SurveyDeposit':
                    return super().__getitem__(i)
            
            
            class expiration(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
            class size(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SMALL": "SMALL",
                        "MODERATE": "MODERATE",
                        "LARGE": "LARGE",
                    }
                
                @schemas.classproperty
                def SMALL(cls):
                    return cls("SMALL")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("MODERATE")
                
                @schemas.classproperty
                def LARGE(cls):
                    return cls("LARGE")
            __annotations__ = {
                "signature": signature,
                "symbol": symbol,
                "deposits": deposits,
                "expiration": expiration,
                "size": size,
            }
    
    symbol: MetaOapg.properties.symbol
    size: MetaOapg.properties.size
    signature: MetaOapg.properties.signature
    expiration: MetaOapg.properties.expiration
    deposits: MetaOapg.properties.deposits
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deposits"]) -> MetaOapg.properties.deposits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["signature", "symbol", "deposits", "expiration", "size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deposits"]) -> MetaOapg.properties.deposits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signature", "symbol", "deposits", "expiration", "size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        size: typing.Union[MetaOapg.properties.size, str, ],
        signature: typing.Union[MetaOapg.properties.signature, str, ],
        expiration: typing.Union[MetaOapg.properties.expiration, str, datetime, ],
        deposits: typing.Union[MetaOapg.properties.deposits, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Survey':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            size=size,
            signature=signature,
            expiration=expiration,
            deposits=deposits,
            _configuration=_configuration,
            **kwargs,
        )

from spacetraders.models.survey_deposit import SurveyDeposit
