# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders import schemas  # noqa: F401


class ShipNav(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The navigation information of the ship.
    """


    class MetaOapg:
        required = {
            "route",
            "systemSymbol",
            "waypointSymbol",
            "flightMode",
            "status",
        }
        
        class properties:
            systemSymbol = schemas.StrSchema
            waypointSymbol = schemas.StrSchema
        
            @staticmethod
            def route() -> typing.Type['ShipNavRoute']:
                return ShipNavRoute
        
            @staticmethod
            def status() -> typing.Type['ShipNavStatus']:
                return ShipNavStatus
        
            @staticmethod
            def flightMode() -> typing.Type['ShipNavFlightMode']:
                return ShipNavFlightMode
            __annotations__ = {
                "systemSymbol": systemSymbol,
                "waypointSymbol": waypointSymbol,
                "route": route,
                "status": status,
                "flightMode": flightMode,
            }
    
    route: 'ShipNavRoute'
    systemSymbol: MetaOapg.properties.systemSymbol
    waypointSymbol: MetaOapg.properties.waypointSymbol
    flightMode: 'ShipNavFlightMode'
    status: 'ShipNavStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemSymbol"]) -> MetaOapg.properties.systemSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waypointSymbol"]) -> MetaOapg.properties.waypointSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["route"]) -> 'ShipNavRoute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ShipNavStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flightMode"]) -> 'ShipNavFlightMode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["systemSymbol", "waypointSymbol", "route", "status", "flightMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemSymbol"]) -> MetaOapg.properties.systemSymbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waypointSymbol"]) -> MetaOapg.properties.waypointSymbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["route"]) -> 'ShipNavRoute': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ShipNavStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flightMode"]) -> 'ShipNavFlightMode': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["systemSymbol", "waypointSymbol", "route", "status", "flightMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        route: 'ShipNavRoute',
        systemSymbol: typing.Union[MetaOapg.properties.systemSymbol, str, ],
        waypointSymbol: typing.Union[MetaOapg.properties.waypointSymbol, str, ],
        flightMode: 'ShipNavFlightMode',
        status: 'ShipNavStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShipNav':
        return super().__new__(
            cls,
            *_args,
            route=route,
            systemSymbol=systemSymbol,
            waypointSymbol=waypointSymbol,
            flightMode=flightMode,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from spacetraders.models.ship_nav_flight_mode import ShipNavFlightMode
from spacetraders.models.ship_nav_route import ShipNavRoute
from spacetraders.models.ship_nav_status import ShipNavStatus
