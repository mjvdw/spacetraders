# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders import schemas  # noqa: F401


class ShipNavRoute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The routing information for the ship's most recent transit or current location.
    """


    class MetaOapg:
        required = {
            "departureTime",
            "arrival",
            "destination",
            "departure",
        }
        
        class properties:
        
            @staticmethod
            def destination() -> typing.Type['ShipNavRouteWaypoint']:
                return ShipNavRouteWaypoint
        
            @staticmethod
            def departure() -> typing.Type['ShipNavRouteWaypoint']:
                return ShipNavRouteWaypoint
            departureTime = schemas.DateTimeSchema
            arrival = schemas.DateTimeSchema
            __annotations__ = {
                "destination": destination,
                "departure": departure,
                "departureTime": departureTime,
                "arrival": arrival,
            }
    
    departureTime: MetaOapg.properties.departureTime
    arrival: MetaOapg.properties.arrival
    destination: 'ShipNavRouteWaypoint'
    departure: 'ShipNavRouteWaypoint'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'ShipNavRouteWaypoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure"]) -> 'ShipNavRouteWaypoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departureTime"]) -> MetaOapg.properties.departureTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrival"]) -> MetaOapg.properties.arrival: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["destination", "departure", "departureTime", "arrival", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> 'ShipNavRouteWaypoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure"]) -> 'ShipNavRouteWaypoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departureTime"]) -> MetaOapg.properties.departureTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrival"]) -> MetaOapg.properties.arrival: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["destination", "departure", "departureTime", "arrival", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        departureTime: typing.Union[MetaOapg.properties.departureTime, str, datetime, ],
        arrival: typing.Union[MetaOapg.properties.arrival, str, datetime, ],
        destination: 'ShipNavRouteWaypoint',
        departure: 'ShipNavRouteWaypoint',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShipNavRoute':
        return super().__new__(
            cls,
            *_args,
            departureTime=departureTime,
            arrival=arrival,
            destination=destination,
            departure=departure,
            _configuration=_configuration,
            **kwargs,
        )

from spacetraders.models.ship_nav_route_waypoint import ShipNavRouteWaypoint
