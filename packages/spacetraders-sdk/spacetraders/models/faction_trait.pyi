# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders import schemas  # noqa: F401


class FactionTrait(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbol",
            "name",
            "description",
        }
        
        class properties:
            
            
            class symbol(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BUREAUCRATIC(cls):
                    return cls("BUREAUCRATIC")
                
                @schemas.classproperty
                def SECRETIVE(cls):
                    return cls("SECRETIVE")
                
                @schemas.classproperty
                def CAPITALISTIC(cls):
                    return cls("CAPITALISTIC")
                
                @schemas.classproperty
                def INDUSTRIOUS(cls):
                    return cls("INDUSTRIOUS")
                
                @schemas.classproperty
                def PEACEFUL(cls):
                    return cls("PEACEFUL")
                
                @schemas.classproperty
                def DISTRUSTFUL(cls):
                    return cls("DISTRUSTFUL")
                
                @schemas.classproperty
                def WELCOMING(cls):
                    return cls("WELCOMING")
                
                @schemas.classproperty
                def SMUGGLERS(cls):
                    return cls("SMUGGLERS")
                
                @schemas.classproperty
                def SCAVENGERS(cls):
                    return cls("SCAVENGERS")
                
                @schemas.classproperty
                def REBELLIOUS(cls):
                    return cls("REBELLIOUS")
                
                @schemas.classproperty
                def EXILES(cls):
                    return cls("EXILES")
                
                @schemas.classproperty
                def PIRATES(cls):
                    return cls("PIRATES")
                
                @schemas.classproperty
                def RAIDERS(cls):
                    return cls("RAIDERS")
                
                @schemas.classproperty
                def CLAN(cls):
                    return cls("CLAN")
                
                @schemas.classproperty
                def GUILD(cls):
                    return cls("GUILD")
                
                @schemas.classproperty
                def DOMINION(cls):
                    return cls("DOMINION")
                
                @schemas.classproperty
                def FRINGE(cls):
                    return cls("FRINGE")
                
                @schemas.classproperty
                def FORSAKEN(cls):
                    return cls("FORSAKEN")
                
                @schemas.classproperty
                def ISOLATED(cls):
                    return cls("ISOLATED")
                
                @schemas.classproperty
                def LOCALIZED(cls):
                    return cls("LOCALIZED")
                
                @schemas.classproperty
                def ESTABLISHED(cls):
                    return cls("ESTABLISHED")
                
                @schemas.classproperty
                def NOTABLE(cls):
                    return cls("NOTABLE")
                
                @schemas.classproperty
                def DOMINANT(cls):
                    return cls("DOMINANT")
                
                @schemas.classproperty
                def INESCAPABLE(cls):
                    return cls("INESCAPABLE")
                
                @schemas.classproperty
                def INNOVATIVE(cls):
                    return cls("INNOVATIVE")
                
                @schemas.classproperty
                def BOLD(cls):
                    return cls("BOLD")
                
                @schemas.classproperty
                def VISIONARY(cls):
                    return cls("VISIONARY")
                
                @schemas.classproperty
                def CURIOUS(cls):
                    return cls("CURIOUS")
                
                @schemas.classproperty
                def DARING(cls):
                    return cls("DARING")
                
                @schemas.classproperty
                def EXPLORATORY(cls):
                    return cls("EXPLORATORY")
                
                @schemas.classproperty
                def RESOURCEFUL(cls):
                    return cls("RESOURCEFUL")
                
                @schemas.classproperty
                def FLEXIBLE(cls):
                    return cls("FLEXIBLE")
                
                @schemas.classproperty
                def COOPERATIVE(cls):
                    return cls("COOPERATIVE")
                
                @schemas.classproperty
                def UNITED(cls):
                    return cls("UNITED")
                
                @schemas.classproperty
                def STRATEGIC(cls):
                    return cls("STRATEGIC")
                
                @schemas.classproperty
                def INTELLIGENT(cls):
                    return cls("INTELLIGENT")
                
                @schemas.classproperty
                def RESEARCH_FOCUSED(cls):
                    return cls("RESEARCH_FOCUSED")
                
                @schemas.classproperty
                def COLLABORATIVE(cls):
                    return cls("COLLABORATIVE")
                
                @schemas.classproperty
                def PROGRESSIVE(cls):
                    return cls("PROGRESSIVE")
                
                @schemas.classproperty
                def MILITARISTIC(cls):
                    return cls("MILITARISTIC")
                
                @schemas.classproperty
                def TECHNOLOGICALLY_ADVANCED(cls):
                    return cls("TECHNOLOGICALLY_ADVANCED")
                
                @schemas.classproperty
                def AGGRESSIVE(cls):
                    return cls("AGGRESSIVE")
                
                @schemas.classproperty
                def IMPERIALISTIC(cls):
                    return cls("IMPERIALISTIC")
                
                @schemas.classproperty
                def TREASURE_HUNTERS(cls):
                    return cls("TREASURE_HUNTERS")
                
                @schemas.classproperty
                def DEXTEROUS(cls):
                    return cls("DEXTEROUS")
                
                @schemas.classproperty
                def UNPREDICTABLE(cls):
                    return cls("UNPREDICTABLE")
                
                @schemas.classproperty
                def BRUTAL(cls):
                    return cls("BRUTAL")
                
                @schemas.classproperty
                def FLEETING(cls):
                    return cls("FLEETING")
                
                @schemas.classproperty
                def ADAPTABLE(cls):
                    return cls("ADAPTABLE")
                
                @schemas.classproperty
                def SELF_SUFFICIENT(cls):
                    return cls("SELF_SUFFICIENT")
                
                @schemas.classproperty
                def DEFENSIVE(cls):
                    return cls("DEFENSIVE")
                
                @schemas.classproperty
                def PROUD(cls):
                    return cls("PROUD")
                
                @schemas.classproperty
                def DIVERSE(cls):
                    return cls("DIVERSE")
                
                @schemas.classproperty
                def INDEPENDENT(cls):
                    return cls("INDEPENDENT")
                
                @schemas.classproperty
                def SELF_INTERESTED(cls):
                    return cls("SELF_INTERESTED")
                
                @schemas.classproperty
                def FRAGMENTED(cls):
                    return cls("FRAGMENTED")
                
                @schemas.classproperty
                def COMMERCIAL(cls):
                    return cls("COMMERCIAL")
                
                @schemas.classproperty
                def FREE_MARKETS(cls):
                    return cls("FREE_MARKETS")
                
                @schemas.classproperty
                def ENTREPRENEURIAL(cls):
                    return cls("ENTREPRENEURIAL")
            name = schemas.StrSchema
            description = schemas.StrSchema
            __annotations__ = {
                "symbol": symbol,
                "name": name,
                "description": description,
            }
    
    symbol: MetaOapg.properties.symbol
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol", "name", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol", "name", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FactionTrait':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            name=name,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )
