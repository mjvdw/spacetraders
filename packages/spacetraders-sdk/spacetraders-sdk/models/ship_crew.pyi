# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders-sdk import schemas  # noqa: F401


class ShipCrew(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The ship's crew service and maintain the ship's systems and equipment.
    """


    class MetaOapg:
        required = {
            "wages",
            "current",
            "rotation",
            "morale",
            "required",
            "capacity",
        }
        
        class properties:
            current = schemas.IntSchema
            required = schemas.IntSchema
            capacity = schemas.IntSchema
            
            
            class rotation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STRICT(cls):
                    return cls("STRICT")
                
                @schemas.classproperty
                def RELAXED(cls):
                    return cls("RELAXED")
            
            
            class morale(
                schemas.IntSchema
            ):
                pass
            
            
            class wages(
                schemas.IntSchema
            ):
                pass
            __annotations__ = {
                "current": current,
                "required": required,
                "capacity": capacity,
                "rotation": rotation,
                "morale": morale,
                "wages": wages,
            }
    
    wages: MetaOapg.properties.wages
    current: MetaOapg.properties.current
    rotation: MetaOapg.properties.rotation
    morale: MetaOapg.properties.morale
    required: MetaOapg.properties.required
    capacity: MetaOapg.properties.capacity
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> MetaOapg.properties.capacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotation"]) -> MetaOapg.properties.rotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["morale"]) -> MetaOapg.properties.morale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wages"]) -> MetaOapg.properties.wages: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["current", "required", "capacity", "rotation", "morale", "wages", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> MetaOapg.properties.capacity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotation"]) -> MetaOapg.properties.rotation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["morale"]) -> MetaOapg.properties.morale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wages"]) -> MetaOapg.properties.wages: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["current", "required", "capacity", "rotation", "morale", "wages", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        wages: typing.Union[MetaOapg.properties.wages, decimal.Decimal, int, ],
        current: typing.Union[MetaOapg.properties.current, decimal.Decimal, int, ],
        rotation: typing.Union[MetaOapg.properties.rotation, str, ],
        morale: typing.Union[MetaOapg.properties.morale, decimal.Decimal, int, ],
        required: typing.Union[MetaOapg.properties.required, decimal.Decimal, int, ],
        capacity: typing.Union[MetaOapg.properties.capacity, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShipCrew':
        return super().__new__(
            cls,
            *_args,
            wages=wages,
            current=current,
            rotation=rotation,
            morale=morale,
            required=required,
            capacity=capacity,
            _configuration=_configuration,
            **kwargs,
        )
