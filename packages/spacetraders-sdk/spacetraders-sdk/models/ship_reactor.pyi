# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders-sdk import schemas  # noqa: F401


class ShipReactor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
    """


    class MetaOapg:
        required = {
            "symbol",
            "requirements",
            "name",
            "description",
            "powerOutput",
        }
        
        class properties:
            
            
            class symbol(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SOLAR_I(cls):
                    return cls("REACTOR_SOLAR_I")
                
                @schemas.classproperty
                def FUSION_I(cls):
                    return cls("REACTOR_FUSION_I")
                
                @schemas.classproperty
                def FISSION_I(cls):
                    return cls("REACTOR_FISSION_I")
                
                @schemas.classproperty
                def CHEMICAL_I(cls):
                    return cls("REACTOR_CHEMICAL_I")
                
                @schemas.classproperty
                def ANTIMATTER_I(cls):
                    return cls("REACTOR_ANTIMATTER_I")
            name = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class powerOutput(
                schemas.IntSchema
            ):
                pass
        
            @staticmethod
            def requirements() -> typing.Type['ShipRequirements']:
                return ShipRequirements
        
            @staticmethod
            def condition() -> typing.Type['ShipCondition']:
                return ShipCondition
            __annotations__ = {
                "symbol": symbol,
                "name": name,
                "description": description,
                "powerOutput": powerOutput,
                "requirements": requirements,
                "condition": condition,
            }
    
    symbol: MetaOapg.properties.symbol
    requirements: 'ShipRequirements'
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    powerOutput: MetaOapg.properties.powerOutput
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powerOutput"]) -> MetaOapg.properties.powerOutput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirements"]) -> 'ShipRequirements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> 'ShipCondition': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol", "name", "description", "powerOutput", "requirements", "condition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powerOutput"]) -> MetaOapg.properties.powerOutput: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirements"]) -> 'ShipRequirements': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> typing.Union['ShipCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol", "name", "description", "powerOutput", "requirements", "condition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        requirements: 'ShipRequirements',
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        powerOutput: typing.Union[MetaOapg.properties.powerOutput, decimal.Decimal, int, ],
        condition: typing.Union['ShipCondition', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShipReactor':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            requirements=requirements,
            name=name,
            description=description,
            powerOutput=powerOutput,
            condition=condition,
            _configuration=_configuration,
            **kwargs,
        )

from spacetraders-sdk.models.ship_condition import ShipCondition
from spacetraders-sdk.models.ship_requirements import ShipRequirements
