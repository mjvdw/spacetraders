# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.     # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spacetraders-sdk import schemas  # noqa: F401


class Market(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbol",
            "imports",
            "exports",
            "exchange",
        }
        
        class properties:
            symbol = schemas.StrSchema
            
            
            class exports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TradeGood']:
                        return TradeGood
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TradeGood'], typing.List['TradeGood']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exports':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TradeGood':
                    return super().__getitem__(i)
            
            
            class imports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TradeGood']:
                        return TradeGood
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TradeGood'], typing.List['TradeGood']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'imports':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TradeGood':
                    return super().__getitem__(i)
            
            
            class exchange(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TradeGood']:
                        return TradeGood
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TradeGood'], typing.List['TradeGood']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exchange':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TradeGood':
                    return super().__getitem__(i)
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MarketTransaction']:
                        return MarketTransaction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MarketTransaction'], typing.List['MarketTransaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MarketTransaction':
                    return super().__getitem__(i)
            
            
            class tradeGoods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MarketTradeGood']:
                        return MarketTradeGood
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MarketTradeGood'], typing.List['MarketTradeGood']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tradeGoods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MarketTradeGood':
                    return super().__getitem__(i)
            __annotations__ = {
                "symbol": symbol,
                "exports": exports,
                "imports": imports,
                "exchange": exchange,
                "transactions": transactions,
                "tradeGoods": tradeGoods,
            }
    
    symbol: MetaOapg.properties.symbol
    imports: MetaOapg.properties.imports
    exports: MetaOapg.properties.exports
    exchange: MetaOapg.properties.exchange
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exports"]) -> MetaOapg.properties.exports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imports"]) -> MetaOapg.properties.imports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange"]) -> MetaOapg.properties.exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tradeGoods"]) -> MetaOapg.properties.tradeGoods: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol", "exports", "imports", "exchange", "transactions", "tradeGoods", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exports"]) -> MetaOapg.properties.exports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imports"]) -> MetaOapg.properties.imports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange"]) -> MetaOapg.properties.exchange: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tradeGoods"]) -> typing.Union[MetaOapg.properties.tradeGoods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol", "exports", "imports", "exchange", "transactions", "tradeGoods", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        imports: typing.Union[MetaOapg.properties.imports, list, tuple, ],
        exports: typing.Union[MetaOapg.properties.exports, list, tuple, ],
        exchange: typing.Union[MetaOapg.properties.exchange, list, tuple, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, schemas.Unset] = schemas.unset,
        tradeGoods: typing.Union[MetaOapg.properties.tradeGoods, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Market':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            imports=imports,
            exports=exports,
            exchange=exchange,
            transactions=transactions,
            tradeGoods=tradeGoods,
            _configuration=_configuration,
            **kwargs,
        )

from spacetraders-sdk.models.market_trade_good import MarketTradeGood
from spacetraders-sdk.models.market_transaction import MarketTransaction
from spacetraders-sdk.models.trade_good import TradeGood
